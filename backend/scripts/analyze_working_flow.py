#!/usr/bin/env python3
"""
Script para analisar o fluxo que est√° funcionando para classifica√ß√µes e nome
e aplicar a mesma l√≥gica para DRE N2
"""

import os
import sys
from dotenv import load_dotenv

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from database.connection_sqlalchemy import get_engine
from sqlalchemy import text

def main():
    print("üîç ANALISANDO FLUXO QUE EST√Å FUNCIONANDO")
    print("=" * 70)
    
    # Conectar ao banco
    engine = get_engine()
    
    with engine.connect() as conn:
        empresas_tag = [
            "7c0c1321-d065-4ed2-afbf-98b2524892ac",  # TAG Projetos
            "d09c3591-3de3-4a8f-913a-2e36de84610f"   # TAG Business Solutions
        ]
        
        for empresa_id in empresas_tag:
            print(f"\nüè¢ EMPRESA: {empresa_id}")
            print("=" * 60)
            
            print("\n1Ô∏è‚É£ VERIFICANDO FLUXO QUE EST√Å FUNCIONANDO (CLASSIFICA√á√ïES)")
            print("-" * 60)
            
            # Verificar o fluxo que est√° funcionando para classifica√ß√µes
            result = conn.execute(text("""
                SELECT 
                    fd.classificacao,
                    dp.descricao_origem,
                    dp.descricao_destino,
                    pc.conta_pai,
                    pc.classificacao_dre_n2,
                    COUNT(*) as total_registros,
                    SUM(fd.valor_original) as valor_total
                FROM financial_data fd
                LEFT JOIN de_para dp ON fd.classificacao = dp.descricao_origem
                LEFT JOIN plano_de_contas pc ON dp.descricao_destino = pc.conta_pai
                WHERE fd.empresa_id = :empresa_id
                AND fd.valor_original IS NOT NULL
                AND dp.descricao_origem IS NOT NULL
                AND pc.conta_pai IS NOT NULL
                AND pc.classificacao_dre_n2 IS NOT NULL
                AND pc.classificacao_dre_n2::text <> ''
                GROUP BY fd.classificacao, dp.descricao_origem, dp.descricao_destino, pc.conta_pai, pc.classificacao_dre_n2
                ORDER BY valor_total DESC
                LIMIT 10
            """), {"empresa_id": empresa_id})
            
            fluxo_funcionando = result.fetchall()
            print(f"üìä CLASSIFICA√á√ïES COM FLUXO COMPLETO: {len(fluxo_funcionando)}")
            for row in fluxo_funcionando:
                print(f"   {row.classificacao} ‚Üí {row.descricao_destino} ‚Üí {row.classificacao_dre_n2}")
                print(f"     {row.total_registros} registros, R$ {row.valor_total:,.2f}")
            
            print("\n2Ô∏è‚É£ VERIFICANDO FLUXO QUE N√ÉO EST√Å FUNCIONANDO (DRE N2)")
            print("-" * 60)
            
            # Verificar o fluxo que n√£o est√° funcionando para DRE N2
            result = conn.execute(text("""
                SELECT 
                    fd.classificacao,
                    dp.descricao_origem,
                    dp.descricao_destino,
                    pc.conta_pai,
                    pc.classificacao_dre_n2,
                    COUNT(*) as total_registros,
                    SUM(fd.valor_original) as valor_total
                FROM financial_data fd
                LEFT JOIN de_para dp ON fd.classificacao = dp.descricao_origem
                LEFT JOIN plano_de_contas pc ON dp.descricao_destino = pc.conta_pai
                WHERE fd.empresa_id = :empresa_id
                AND fd.valor_original IS NOT NULL
                AND dp.descricao_origem IS NOT NULL
                AND (pc.conta_pai IS NULL OR pc.classificacao_dre_n2 IS NULL OR pc.classificacao_dre_n2::text = '')
                GROUP BY fd.classificacao, dp.descricao_origem, dp.descricao_destino, pc.conta_pai, pc.classificacao_dre_n2
                ORDER BY valor_total DESC
                LIMIT 10
            """), {"empresa_id": empresa_id})
            
            fluxo_nao_funcionando = result.fetchall()
            print(f"üìä CLASSIFICA√á√ïES COM FLUXO INCOMPLETO: {len(fluxo_nao_funcionando)}")
            for row in fluxo_nao_funcionando:
                status = "‚ùå SEM CONTA" if row.conta_pai is None else "‚ùå SEM CLASSIFICA√á√ÉO DRE N2"
                print(f"   {row.classificacao} ‚Üí {row.descricao_destino} | {status}")
                print(f"     {row.total_registros} registros, R$ {row.valor_total:,.2f}")
            
            print("\n3Ô∏è‚É£ VERIFICANDO DRE_STRUCTURE_N2 DISPON√çVEL")
            print("-" * 60)
            
            # Verificar quais DRE N2 est√£o dispon√≠veis
            result = conn.execute(text("""
                SELECT 
                    description,
                    is_active,
                    COUNT(*) as total
                FROM dre_structure_n2
                WHERE is_active = true
                GROUP BY description, is_active
                ORDER BY description
            """))
            
            dre_n2_disponiveis = result.fetchall()
            print(f"üìä DRE N2 DISPON√çVEIS: {len(dre_n2_disponiveis)}")
            for row in dre_n2_disponiveis:
                print(f"   {row.description}")
            
            print("\n4Ô∏è‚É£ VERIFICANDO CORRESPOND√äNCIA PLANO_DE_CONTAS ‚Üí DRE_STRUCTURE_N2")
            print("-" * 60)
            
            # Verificar correspond√™ncia entre plano_de_contas e dre_structure_n2
            result = conn.execute(text("""
                SELECT 
                    pc.classificacao_dre_n2,
                    ds2.description,
                    ds2.is_active,
                    COUNT(*) as total
                FROM plano_de_contas pc
                LEFT JOIN dre_structure_n2 ds2 ON pc.classificacao_dre_n2 = ds2.description
                WHERE pc.classificacao_dre_n2 IS NOT NULL
                AND pc.classificacao_dre_n2::text <> ''
                GROUP BY pc.classificacao_dre_n2, ds2.description, ds2.is_active
                ORDER BY pc.classificacao_dre_n2
            """))
            
            correspondencias = result.fetchall()
            print(f"üìä CORRESPOND√äNCIAS: {len(correspondencias)}")
            
            sem_correspondencia = 0
            com_correspondencia = 0
            
            for row in correspondencias:
                if row.description is None:
                    print(f"   ‚ùå {row.classificacao_dre_n2} ‚Üí SEM CORRESPOND√äNCIA")
                    sem_correspondencia += 1
                else:
                    status = "‚úÖ ATIVA" if row.is_active else "‚ùå INATIVA"
                    print(f"   {status} {row.classificacao_dre_n2} ‚Üí {row.description}")
                    com_correspondencia += 1
            
            print(f"\nüìä RESUMO:")
            print(f"   ‚úÖ Com correspond√™ncia: {com_correspondencia}")
            print(f"   ‚ùå Sem correspond√™ncia: {sem_correspondencia}")
        
        print("\n5Ô∏è‚É£ CONCLUS√ÉO")
        print("-" * 60)
        print("üîç AN√ÅLISE CONCLU√çDA!")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   1. Identificar classifica√ß√µes que n√£o t√™m correspond√™ncia no dre_structure_n2")
        print("   2. Criar as correspond√™ncias faltantes")
        print("   3. Verificar se os valores do DRE N2 agora batem com as classifica√ß√µes")

if __name__ == "__main__":
    main()
