services:
  # üóÑÔ∏è Banco de Dados PostgreSQL - Staging
  postgres:
    image: postgres:15-alpine
    container_name: plataforma-tag-postgres-staging
    environment:
      POSTGRES_DB: tag_financeiro_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging_password_123}
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - plataforma-tag-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üî¥ Cache Redis - Staging
  redis:
    image: redis:7-alpine
    container_name: plataforma-tag-redis-staging
    ports:
      - "6380:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - plataforma-tag-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üêç Backend Python/FastAPI - Staging
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: plataforma-tag-backend-staging
    env_file:
      - environments/staging/.env
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-staging_password_123}@postgres:5432/tag_financeiro_staging
      - REDIS_URL=redis://redis:6379
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=false
      - ENVIRONMENT=staging
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-staging_jwt_secret_key}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5174,https://staging-frontend.vercel.app}
    ports:
      - "8001:8000"
    volumes:
      - backend_staging_uploads:/app/uploads
      - backend_staging_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - plataforma-tag-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: uvicorn main:app --host 0.0.0.0 --port 8000

  # ‚öõÔ∏è Frontend React - Staging (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=http://localhost:8001
        - VITE_APP_NAME=Plataforma TAG (Staging)
        - VITE_APP_ENVIRONMENT=staging
    container_name: plataforma-tag-frontend-staging
    env_file:
      - environments/staging/.env
    environment:
      - VITE_API_URL=http://localhost:8001
      - VITE_APP_NAME=Plataforma TAG (Staging)
      - VITE_APP_ENVIRONMENT=staging
      - NODE_ENV=staging
    ports:
      - "5174:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - plataforma-tag-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üóÑÔ∏è pgAdmin 4 - Staging
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: plataforma-tag-pgadmin-staging
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tag-staging.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-staging_admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'True'
      PGADMIN_CONFIG_MASTER_PASSWORD: "'${PGADMIN_PASSWORD:-staging_admin123}'"
    ports:
      - "5051:80"
    volumes:
      - pgadmin_staging_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - plataforma-tag-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  backend_staging_uploads:
    driver: local
  backend_staging_logs:
    driver: local
  pgadmin_staging_data:
    driver: local

networks:
  plataforma-tag-staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
